import json
import urllib.request
import os
import boto3
import uuid
import time

# LINEチャネルアクセストークン（環境変数）
LINE_TOKEN = os.environ.get('LINE_CHANNEL_ACCESS_TOKEN')
print("LINE_TOKEN:", LINE_TOKEN)  # デバッグ用

# DynamoDB テーブル名（環境変数）
DYNAMO_TABLE = os.environ.get('DYNAMO_TABLE_NAME', 'LINE_Messages')
print("DynamoDB テーブル:", DYNAMO_TABLE)

# DynamoDB リソースとテーブル
dynamodb = boto3.resource('dynamodb')
table = dynamodb.Table(DYNAMO_TABLE)

# LINEに返信する関数
def reply_message(reply_token, text):
    url = "https://api.line.me/v2/bot/message/reply"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {LINE_TOKEN}"
    }
    data = {
        "replyToken": reply_token,
        "messages": [{"type": "text", "text": text}]
    }
    req = urllib.request.Request(
        url,
        data=json.dumps(data).encode("utf-8"),
        headers=headers,
        method="POST"
    )
    try:
        with urllib.request.urlopen(req) as res:
            body = res.read()
            print("返信成功:", body)
    except Exception as e:
        print("返信エラー:", e)

# DynamoDBにメッセージを保存する関数
def save_message(user_id, message):
    new_id = str(uuid.uuid4())
    table.put_item(
        Item={
            'id': new_id,          # 一意のID
            'userId': user_id,                # 送信者
            'message': message,               # メッセージ内容
            'timestamp': int(time.time())     # UNIXタイムスタンプ
        }
    )
    return new_id
    print("DBに保存完了:", message)

# Lambdaのエントリーポイント
def lambda_handler(event, context):
    body = json.loads(event['body'])
    
    if "events" in body and len(body["events"]) > 0:
        event0 = body["events"][0]
        if event0["type"] == "message" and "message" in event0:
            msg = event0["message"]["text"]
            reply_token = event0["replyToken"]
            user_id = event0["source"]["userId"]
            
            print("受信メッセージ:", msg)
            
            # DynamoDBに保存
            id = save_message(user_id, msg)
            
            # LINEに返信
            reply_text = "メッセージID : " + id
            reply_message(reply_token, reply_text)
    
    return {
        "statusCode": 200,
        "body": json.dumps({"message": "ok"})
    }
